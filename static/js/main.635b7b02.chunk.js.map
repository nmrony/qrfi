{"version":3,"sources":["GenerateQR.jsx","WifiForm.jsx","App.js","serviceWorker.js","index.js"],"names":["GenerateQR","props","qrValue","qrOptions","show","size","isHidden","options","Object","objectWithoutProperties","react_default","a","createElement","className","Fragment","lib_default","assign","renderAs","level","parseInt","value","WifiFormValidationSchema","Yup","shape","ssid","required","encryption","password","min","max","WifiFormContainer","formik_esm","initialValues","initialValue","validationSchema","onSubmit","values","_ref","setSubmitting","handleSubmit","_ref2","errors","touched","isSubmitting","type","name","placeholder","component","disabled","escape_string","string","to_escape","output","i","length","indexOf","App","state","showqr","includeMargin","bgColor","fgColor","_this","setState","generateQRString","_this$state$values","qrstring","react","WifiForm_WifiFormContainer","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.635b7b02.chunk.js","sourcesContent":["import QRCode from 'qrcode.react';\nimport React from 'react';\nexport default function GenerateQR(props) {\n  const { qrValue, qrOptions, show } = props;\n  const { isHidden, size, ...options } = qrOptions;\n  return (\n    <div className=\"column has-text-centered\">\n      {show ? (\n        <>\n          <QRCode renderAs=\"canvas\" level=\"L\" size={parseInt(size, 10)} value={qrValue} {...options} />\n          <p className=\"help has-text-grey-darker is-size-4\">Right Click and choose 'save as image' to save it</p>\n        </>\n      ) : (\n        <p className=\"help has-text-grey-darker is-size-4\">Please submit the form</p>\n      )}\n    </div>\n  );\n}\n","import { Field, Form, Formik } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\n\nconst WifiFormValidationSchema = Yup.object().shape({\n  ssid: Yup.string().required('SSID is required'),\n  encryption: Yup.string().required('Encryption is Required'),\n  password: Yup.string().required('Password is Required'),\n  size: Yup.number()\n    .min(300, 'Size is too small')\n    .max(500, 'Size is too big!')\n    .required('Size is required')\n});\n\nexport const WifiFormContainer = props => (\n  <div className=\"section\">\n    <Formik\n      initialValues={props.initialValue}\n      validationSchema={WifiFormValidationSchema}\n      onSubmit={(values, { /* resetForm, setErrors,*/ setSubmitting }) => {\n        setSubmitting(false);\n        props.handleSubmit(values);\n      }}\n    >\n      {({ errors, touched, isSubmitting }) => (\n        <Form>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label className=\"label\">SSID</label>\n              <Field className=\"input\" type=\"text\" name=\"ssid\" placeholder=\"SSID\" />\n              {touched.ssid && errors.ssid && <p className=\"help is-danger\">{errors.ssid}</p>}\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label className=\"label\">Password</label>\n\n              <Field className=\"input\" type=\"password\" name=\"password\" placeholder=\"Password\" />\n              <p className=\"help is-info\">We never store your password</p>\n              {touched.password && errors.password && <p className=\"help is-danger\">{errors.password}</p>}\n            </div>\n          </div>\n          <div className=\"field\">\n            <label className=\"label\">Encryption</label>\n            <div className=\"control\">\n              <div className=\"select is-fullwidth\">\n                <Field component=\"select\" name=\"encryption\">\n                  <option value=\"\">Select Encryption</option>\n                  <option value=\"WPA\">WPA/WPA2</option>\n                  <option value=\"WEP\">WEP</option>\n                  <option value=\"nopass\">None</option>\n                </Field>\n                {touched.encryption && errors.encryption && <p className=\"help is-danger\">{errors.encryption}</p>}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"control\">\n            <label className=\"label\">QR Image Size</label>\n            <Field className=\"input\" type=\"text\" name=\"size\" placeholder=\"QR Image Size\" />\n            {touched.size && errors.size && <p className=\"help is-danger\">{errors.size}</p>}\n          </div>\n          <div className=\"control\">\n            <br />\n            <label className=\"label\">fgColor</label>\n            <Field className=\"input\" type=\"color\" name=\"fgColor\" placeholder=\"Pick fgColor color\" />\n          </div>\n          <div className=\"control\">\n            <label className=\"label\">bgColor</label>\n            <Field className=\"input\" type=\"color\" name=\"bgColor\" placeholder=\"Pick bgColor color\" />\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label className=\"checkbox\">\n                <br />\n                <Field type=\"checkbox\" name=\"includeMargin\" /> Inclue margin in QRCode\n              </label>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <label className=\"checkbox\">\n                <br />\n                <Field type=\"checkbox\" name=\"isHidden\" /> Wifi is not visible\n              </label>\n            </div>\n          </div>\n          <div className=\"control\">\n            <br />\n            <button type=\"submit\" className=\"button \" disabled={isSubmitting}>\n              Submit\n            </button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n","import React, { Component, Fragment } from 'react';\nimport GenerateQR from './GenerateQR';\nimport { WifiFormContainer } from './WifiForm';\n\nfunction escape_string(string) {\n  const to_escape = ['\\\\', ';', ',', ':', '\"'];\n  let output = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].indexOf(to_escape) !== -1) {\n      output += '\\\\' + string[i];\n    } else {\n      output += string[i];\n    }\n  }\n  return output;\n}\n\nclass App extends Component {\n  state = {\n    showqr: false,\n    values: {\n      size: 300,\n      ssid: '',\n      encryption: '',\n      password: '',\n      includeMargin: false,\n      bgColor: '#ffffff',\n      fgColor: '#000000',\n      isHidden: false\n    }\n  };\n\n  handleSubmit = values => {\n    this.setState({ values, showqr: true });\n  };\n\n  generateQRString = () => {\n    const { ssid, password, encryption, isHidden } = this.state.values;\n    var qrstring = 'WIFI:S:' + escape_string(ssid) + ';T:' + encryption + ';P:' + escape_string(password) + ';';\n    if (isHidden) {\n      qrstring += 'H:true';\n    }\n    qrstring += ';';\n    return qrstring;\n  };\n  render() {\n    return (\n      <Fragment>\n        <section className=\"hero is-info\">\n          <div className=\"hero-body has-text-centered\">\n            <div className=\"container\">\n              <h1 className=\"title\">QRfi</h1>\n              <h2 className=\"subtitle\">Generate QRCode for Wifi</h2>\n            </div>\n          </div>\n        </section>\n        <section className=\"section row\">\n          <div className=\"columns\">\n            <div className=\"column is-half\">\n              <div className=\"box\">\n                <WifiFormContainer initialValue={this.state.values} handleSubmit={this.handleSubmit} />\n              </div>\n            </div>\n            <GenerateQR qrValue={this.generateQRString()} show={this.state.showqr} qrOptions={this.state.values} />\n          </div>\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}